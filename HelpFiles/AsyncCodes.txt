Tip1:
============================================================================================================================
public Task<object> GetAsync(string key, CancellationToken cancellationToken, bool continueOnCapturedContext)
        {
            cancellationToken.ThrowIfCancellationRequested();
            return TaskHelper.FromResult(Get(key));
            // (With C#7.0, a ValueTask<> approach would be preferred, but some of our tfms do not support that.  TO DO: Implement it, with preprocessor if/endif directives, for NetStandard)
        }

public object Get(String key)
        {
            object value;
            if (_cache.TryGetValue(key, out value))
            {
                return value;
            }
            return null;
        }

============================================================================================================================